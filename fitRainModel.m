function [y1] = fitRainModel(x1)
%FITRAINMODEL neural network simulation function.
%
% Auto-generated by MATLAB, 13-Feb-2022 00:18:17.
% 
% [y1] = fitRainModel(x1) takes these arguments:
%   x = 5xQ matrix, input #1
% and returns:
%   y = 1xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0;0;0;0;0];
x1_step1.gain = [0.0208333333333333;0.0202020202020202;0.00193423597678917;0.00192529842125529;0.0350877192982456];
x1_step1.ymin = -1;

% Layer 1
b1 = [2.1576198815210259063;-0.73037823604087925844;2.7217117473444609743;-1.9347103902459239499;-1.430258410089375376;0.067743938361712163765;1.3989973575819074636;-0.92385448088381572074;-1.960442006287828276;1.2331921056655361646];
IW1_1 = [-0.75769880949873080755 1.1656245531377043001 0.10505240987057638813 1.0699788574456177148 -1.3516720487352518187;3.1563069245388040152 0.71305792119111088834 -0.56035231180130995465 -1.1344799267959768674 0.29699967428896473232;-0.64839057037317393561 1.3325919942590525036 -0.33279863879589965947 -1.5901668079394744026 -0.22402793334418952265;2.4392358336564434751 0.01798093994278256863 0.78658792904279617453 -0.001630553374829033994 0.56756147622625163773;-0.37635098125481325493 1.2951809351983096796 2.1521439246068299056 0.41891477948861466363 -0.65761270504239621726;-2.0383417401407504244 0.61865327014631077418 0.17839259394570605721 -1.3081172491622392595 -0.52571304304362531656;-0.59587776570094297401 -0.17096378504319476033 1.7073442695705403072 -0.52881529186414821808 -2.4617003233587353428;-0.85254616507044189699 -0.091200534796772148027 6.345611989312573975 -5.0250040868011458528 -0.37776967941466921275;-1.2027775409187750899 0.71835537283199735192 -0.42333392380270662425 -1.4384804530323200833 0.87712200643518078991;-0.0010107184813562819503 -1.0940428801349837418 0.80737609046199132479 -0.78434833738063880482 -0.47674026788030032797];

% Layer 2
b2 = 0.12105415524405552241;
LW2_1 = [-0.31642089044447230251 1.6907099780772956166 -3.0980628427543179804 -3.6446586162065059966 4.2503834323786735538 1.0166524520546784682 -0.73082832612727888222 -5.1109867250534177785 0.94665666586167540597 1.4399715417548497598];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.0350877192982456;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
