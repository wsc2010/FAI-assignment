function [y1] = cascadeTempModel2(x1)
%CASCADETEMPMODEL2 neural network simulation function.
%
% Auto-generated by MATLAB, 13-Feb-2022 00:12:55.
% 
% [y1] = cascadeTempModel2(x1) takes these arguments:
%   x = 4xQ matrix, input #1
% and returns:
%   y = 1xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0;0;13;-0.6];
x1_step1.gain = [0.0208333333333333;0.0202020202020202;0.0668896321070234;0.0696864111498258];
x1_step1.ymin = -1;

% Layer 1
b1 = [3.2318313618505256635;-2.2575211309105758239;-0.11209260643452502448;-1.2464470150167021867;-0.974227350853515639;-1.1375725636381301964;1.1803372317465596897;-1.1534671590804534969;-1.746909665542135448;-0.97082393064411531824];
IW1_1 = [-1.2989154585488258409 -2.3155816435937270903 1.113730185525422911 1.4181487897907891771;0.40358898498285528111 3.7868133331462976443 1.5607023256135290623 -1.8389783265118133659;-1.1157856359451781003 -1.0475215218869942113 1.4112410948668649979 -2.7069958852791122794;0.31626540068160208241 -2.7601678153172981567 -1.4987384815125708304 -0.2663689400614617786;2.3324129239141742076 2.3704914956882565669 4.5368608482210852628 1.7345708642088628615;-2.854773977160470988 -0.38940395275699052346 0.55347351398595834304 -1.0521188127594476303;-0.011329527738165215411 -2.854274782936164101 -1.8893921554171755339 0.86053332622190625845;-1.3430578187419526248 -0.40987890064133075674 1.1294079839743265126 -1.4485810117784292395;-0.14515382730030645941 2.4016908283681748237 0.4378614722527971459 -1.1336264273669378611;0.23143641955692731416 -0.77611948395766017228 1.9115191185047779587 -2.2136946931184033893];

% Layer 2
b2 = -0.25163290425977080655;
IW2_1 = [-0.0012026388692515793677 0.98718023681807731684 1.1643642129861631052 0.11243514946544333477];
LW2_1 = [0.0087302177287570288666 0.42996300547643279133 0.18468138421207544453 0.43079940514633968673 -0.078093424670649239094 -0.67166875244685231294 0.39443038674008873423 1.3914334830804697685 -0.65509718630121671623 -0.9394938803426301499];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.0649350649350649;
y1_step1.xoffset = 5.6;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + IW2_1*xp1 + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
